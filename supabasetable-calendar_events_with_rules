-- View Definition
CREATE OR REPLACE VIEW public.calendar_events_with_rules AS
 SELECT 
    ce.id,
    ce.created_at,
    ce.updated_at,
    ce.title,
    ce.start_time,
    ce.end_time,
    ce.description,
    ce.event_type,
    ce.is_active,
    ce.clinician_id,
    ce.all_day,
    ce.recurrence_id,
    ce.google_event_id,
    rr.rrule
 FROM 
    public.calendar_events ce
 LEFT JOIN 
    public.recurrence_rules rr ON ce.id = rr.event_id;

-- Comment
COMMENT ON VIEW public.calendar_events_with_rules IS 'Calendar events joined with their recurrence rules';










Calendar Events With Rules View Structure
This is a database view that joins two tables:

Main Event Data from calendar_events

id: UUID primary key from the calendar_events table
created_at, updated_at: Standard timestamps
title: Event title
start_time, end_time: Event time boundaries
description: Event description
event_type: Type categorization (e.g., 'availability', 'appointment')
is_active: Boolean flag for event status
clinician_id: Reference to the associated clinician
all_day: Boolean flag for all-day events
recurrence_id: Reference to a recurrence pattern
google_event_id: External reference to Google Calendar
Recurrence Data from recurrence_rules

rrule: iCalendar-format recurrence rule string (RFC 5545)
Purpose and Usage
This view serves several important functions:

Consolidated Calendar Data Access

Provides a single query point for events with their recurrence rules
Simplifies code that needs to display or process recurring events
Data Integration

Joins normalized data from two separate tables
Presents a denormalized view for simpler consumption
Calendar Expansion Support

Enables the application to:
Retrieve both single events and recurring events
Process the recurrence rule to generate occurrences
Apply calendar_exceptions to modify specific occurrences
Relationships
The view represents the following relationships:

Primary Join

Links calendar_events to recurrence_rules via calendar_events.id = recurrence_rules.event_id
Uses a LEFT JOIN to include all events, even those without recurrence rules
Implicit Relationships

Inherits the relationship between calendar_events and profiles via clinician_id
May be referenced by calendar display components that need to show recurring events
Implementation Notes
View vs. Table

This is a SQL VIEW, not a physical table
It doesn't store data directly but provides a query interface
Performance Considerations

The view performs a join operation, which may have performance implications for large datasets
May benefit from appropriate indexing on the underlying tables
Recurrence Processing

The rrule field contains a standardized iCalendar recurrence rule
Application code would need to parse this rule to generate individual occurrences
The RRule library (which appears to be used in your codebase) can process these rules
This view is part of a well-designed calendar system that separates base events from their recurrence patterns, following best practices for calendar data management while providing a convenient query interface for application code.