-- Table Definition
CREATE TABLE public.time_off (
    id UUID NOT NULL DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    clinician_id UUID NOT NULL,
    date DATE NOT NULL,
    start_time TIME WITHOUT TIME ZONE NOT NULL,
    end_time TIME WITHOUT TIME ZONE NOT NULL,
    reason TEXT,
    all_day BOOLEAN DEFAULT false,
    PRIMARY KEY (id)
);

-- Indices
CREATE INDEX time_off_clinician_id_idx ON public.time_off USING btree (clinician_id);
CREATE INDEX time_off_date_idx ON public.time_off USING btree (date);

-- Foreign Keys
ALTER TABLE public.time_off 
ADD CONSTRAINT time_off_clinician_id_fkey 
FOREIGN KEY (clinician_id) REFERENCES public.profiles(id) ON DELETE CASCADE;

-- Triggers
CREATE TRIGGER set_updated_at_timestamp
BEFORE UPDATE ON public.time_off
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();

-- Comment
COMMENT ON TABLE public.time_off IS 'Records periods when clinicians are unavailable';











Time Off Table Structure
The time_off table has the following key characteristics:

Primary Identification

id: UUID that serves as the primary key, auto-generated with gen_random_uuid()
Metadata Timestamps

created_at: Timestamp when the record was created, defaults to current time
updated_at: Timestamp that's automatically updated via a trigger
Association

clinician_id: UUID that references the profile of the clinician who is taking time off
This is a required field (NOT NULL)
Time Period Details

date: The specific date for the time off (NOT NULL)
start_time: Beginning time of the unavailability period (NOT NULL)
end_time: Ending time of the unavailability period (NOT NULL)
all_day: Boolean flag indicating if the time off spans the entire day (default: false)
Additional Information

reason: Optional text field explaining the reason for time off
Table Relationships
The time_off table has one key relationship:

Clinician Reference
Links to profiles through clinician_id with ON DELETE CASCADE
This means if a clinician profile is deleted, all their time off records are also removed
This enforces referential integrity - every time off record must belong to a valid clinician
Indices
The table has optimized queries with two indices:

time_off_clinician_id_idx: For quick lookup of all time off records for a specific clinician
time_off_date_idx: For efficient date-based filtering and calendar views
Update Management
The table uses a trigger set_updated_at_timestamp that automatically updates the updated_at column whenever a record is modified.

Integration with Calendar System
This table appears to be integrated with the overall calendar system in the following ways:

Scheduling Conflict Prevention

Time off records can be checked when scheduling appointments to prevent conflicts
The application can ensure clinicians aren't booked during their time off periods
Calendar View Integration

Time off periods can be displayed on calendar views alongside appointments
This is evident from the view unified_calendar_view which includes time off records
Availability Management

Works in conjunction with the availability system to define when clinicians can and cannot be booked
Usage in Application
Based on the code in your application, the time_off table is used for:

Clinician Dashboard

Displaying time off periods in the clinician's calendar view
Allowing clinicians to manage their unavailability
Appointment Booking

Checking for conflicts when scheduling new appointments
Preventing double-booking during time off periods
Calendar Display

Showing time off as a distinct event type in calendar views
Using different styling for time off events vs. appointments or availability slots
The time_off table is a straightforward but essential component of a comprehensive scheduling system, providing the necessary structure to track and respect clinician unavailability periods while maintaining integration with the broader calendar functionality.