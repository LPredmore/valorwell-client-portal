-- Table Definition
CREATE TABLE public.calendar_exceptions (
    id UUID NOT NULL DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    recurrence_event_id UUID,
    exception_date TIMESTAMP WITH TIME ZONE NOT NULL,
    is_cancelled BOOLEAN DEFAULT false,
    replacement_event_id UUID,
    PRIMARY KEY (id)
);

-- Indices
CREATE INDEX calendar_exceptions_recurrence_event_id_idx ON public.calendar_exceptions USING btree (recurrence_event_id);
CREATE INDEX calendar_exceptions_exception_date_idx ON public.calendar_exceptions USING btree (exception_date);

-- Foreign Keys
ALTER TABLE public.calendar_exceptions 
ADD CONSTRAINT calendar_exceptions_recurrence_event_id_fkey 
FOREIGN KEY (recurrence_event_id) REFERENCES public.calendar_events(id) ON DELETE CASCADE;

ALTER TABLE public.calendar_exceptions 
ADD CONSTRAINT calendar_exceptions_replacement_event_id_fkey 
FOREIGN KEY (replacement_event_id) REFERENCES public.calendar_events(id) ON DELETE SET NULL;

-- Triggers
CREATE TRIGGER set_updated_at_timestamp
BEFORE UPDATE ON public.calendar_exceptions
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();

-- Comment
COMMENT ON TABLE public.calendar_exceptions IS 'Stores exceptions to recurring calendar events';










Calendar Exceptions Table Structure
The calendar_exceptions table has the following key characteristics:

Primary Identification

id: UUID that serves as the primary key, auto-generated with gen_random_uuid()
Metadata Timestamps

created_at: Timestamp when the exception was created, defaults to current time
updated_at: Timestamp that's automatically updated via a trigger
Referenced Events

recurrence_event_id: UUID that references the original recurring event in calendar_events
replacement_event_id: UUID that references a replacement event (if applicable) in calendar_events
Exception Details

exception_date: The specific date/time this exception applies to
is_cancelled: Boolean flag indicating if this occurrence is cancelled (default: false)
Table Relationships
The calendar_exceptions table has two key relationships:

Original Event Reference

Links to calendar_events through recurrence_event_id with ON DELETE CASCADE
This means if the original recurring event is deleted, all its exceptions are also removed
Replacement Event Reference

Links to calendar_events through replacement_event_id with ON DELETE SET NULL
If a replacement event is deleted, the reference is set to NULL but the exception remains
Indices
The table has optimized queries with two indices:

calendar_exceptions_recurrence_event_id_idx: For quick lookup by recurring event
calendar_exceptions_exception_date_idx: For efficient date-based filtering
Update Management
The table uses a trigger set_updated_at_timestamp that automatically updates the updated_at column whenever a record is modified.

Purpose and Usage
This table serves several important functions in the calendar system:

Recurring Event Management

Enables modifications to specific instances of recurring events
Allows cancellation of individual occurrences without affecting the series
Date-Specific Overrides

Records exact dates where exceptions apply
Can specify a replacement event with different details
Calendar View Integration

When generating a calendar view, the system can query this table to find exceptions
Helps implement the standard calendar pattern of "Edit this occurrence" vs. "Edit all occurrences"
The calendar_exceptions table is a crucial component in a comprehensive calendar system, allowing for the flexibility needed to handle real-world scheduling exceptions while maintaining the efficiency of recurring event patterns. It follows the standard design pattern used in many calendar applications for handling exceptions to recurring events.