-- Table Definition
CREATE TABLE public.profiles (
    id UUID NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    email TEXT NOT NULL,
    first_name TEXT,
    last_name TEXT,
    phone TEXT,
    role app_role NOT NULL DEFAULT 'client'::app_role,
    profile_type TEXT,
    time_zone TEXT DEFAULT 'America/Chicago'::text,
    google_calendar_linked BOOLEAN DEFAULT false,
    google_calendar_last_sync TIMESTAMP WITH TIME ZONE,
    temp_password TEXT,
    PRIMARY KEY (id),
    CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE
);

-- Indices
CREATE INDEX profiles_email_idx ON public.profiles USING btree (email);
CREATE INDEX profiles_role_idx ON public.profiles USING btree (role);

-- Triggers
CREATE TRIGGER set_updated_at_timestamp
BEFORE UPDATE ON public.profiles
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();

-- Comment
COMMENT ON TABLE public.profiles IS 'User profile information linked to auth.users';

-- Enum Type Definition referenced by the profile table
CREATE TYPE public.app_role AS ENUM (
    'client',
    'clinician',
    'admin'
);










Profiles Table Structure
The profiles table has the following key characteristics:

Primary Key and Authentication Link

id: UUID that directly references the auth.users table with ON DELETE CASCADE
This makes the table a direct extension of the authentication system
Basic User Information

email: Text field for user's email address (required)
first_name: Text field for user's first name (optional)
last_name: Text field for user's last name (optional)
phone: Text field for user's phone number (optional)
Role and Type

role: Uses the app_role enum type with values 'client', 'clinician', or 'admin'
Default value is 'client'
profile_type: Additional text classification (optional)
Time Zone Management

time_zone: Text field for storing the user's time zone
Default value is 'America/Chicago'
Google Calendar Integration

google_calendar_linked: Boolean flag for Google Calendar connection status
google_calendar_last_sync: Timestamp of the last Google Calendar synchronization
Temporary Authentication

temp_password: Text field for storing temporary password information
Timestamps

created_at: Timestamp with automatic default value
updated_at: Timestamp with trigger-based update management
Table Relationships
The profiles table is central in your application's data structure:

Relationship with Authentication System

Direct foreign key to auth.users
Ensures profile deletion when a user is deleted
Relationship with Other Tables

Referenced by clients table (implied by application code)
Referenced by clinicians table (implied by application code)
Referenced by calendar_events through the clinician_id field
Indices
The table has optimized queries with two indices:

profiles_email_idx: For quick email lookup
profiles_role_idx: For filtering users by role
Update Management
The table uses a trigger set_updated_at_timestamp that automatically updates the updated_at column whenever a record is modified.

This profiles table serves as the foundation for user management in your application, bridging the authentication system with your business logic and storing essential information about each user regardless of their role in the system.

I'll provide a detailed SQL export of the profiles table to help you understand its structure, constraints, and relationships.

Let me analyze the profiles table in detail:

The profiles table is a core table in your system that stores basic user profile information. It's linked to the Supabase authentication system and serves as the foundation for user-related data in your application.

Here's the complete SQL export:


-- Table Definition
CREATE TABLE public.profiles (
    id UUID NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    email TEXT NOT NULL,
    first_name TEXT,
    last_name TEXT,
    phone TEXT,
    role app_role NOT NULL DEFAULT 'client'::app_role,
    profile_type TEXT,
    time_zone TEXT DEFAULT 'America/Chicago'::text,
    google_calendar_linked BOOLEAN DEFAULT false,
    google_calendar_last_sync TIMESTAMP WITH TIME ZONE,
    temp_password TEXT,
    PRIMARY KEY (id),
    CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE
);

-- Indices
CREATE INDEX profiles_email_idx ON public.profiles USING btree (email);
CREATE INDEX profiles_role_idx ON public.profiles USING btree (role);

-- Triggers
CREATE TRIGGER set_updated_at_timestamp
BEFORE UPDATE ON public.profiles
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();

-- Comment
COMMENT ON TABLE public.profiles IS 'User profile information linked to auth.users';

-- Enum Type Definition referenced by the profile table
CREATE TYPE public.app_role AS ENUM (
    'client',
    'clinician',
    'admin'
);
Profiles Table Structure
The profiles table has the following key characteristics:

Primary Key and Authentication Link

id: UUID that directly references the auth.users table with ON DELETE CASCADE
This makes the table a direct extension of the authentication system
Basic User Information

email: Text field for user's email address (required)
first_name: Text field for user's first name (optional)
last_name: Text field for user's last name (optional)
phone: Text field for user's phone number (optional)
Role and Type

role: Uses the app_role enum type with values 'client', 'clinician', or 'admin'
Default value is 'client'
profile_type: Additional text classification (optional)
Time Zone Management

time_zone: Text field for storing the user's time zone
Default value is 'America/Chicago'
Google Calendar Integration

google_calendar_linked: Boolean flag for Google Calendar connection status
google_calendar_last_sync: Timestamp of the last Google Calendar synchronization
Temporary Authentication

temp_password: Text field for storing temporary password information
Timestamps

created_at: Timestamp with automatic default value
updated_at: Timestamp with trigger-based update management
Table Relationships
The profiles table is central in your application's data structure:

Relationship with Authentication System

Direct foreign key to auth.users
Ensures profile deletion when a user is deleted
Relationship with Other Tables

Referenced by clients table (implied by application code)
Referenced by clinicians table (implied by application code)
Referenced by calendar_events through the clinician_id field
Indices
The table has optimized queries with two indices:

profiles_email_idx: For quick email lookup
profiles_role_idx: For filtering users by role
Update Management
The table uses a trigger set_updated_at_timestamp that automatically updates the updated_at column whenever a record is modified.

This profiles table serves as the foundation for user management in your application, bridging the authentication system with your business logic and storing essential information about each user regardless of their role in the system.