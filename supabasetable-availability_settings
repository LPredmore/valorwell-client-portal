Table Definition

CREATE TABLE public.availability_settings (
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    clinician_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    default_slot_duration integer NOT NULL DEFAULT 60,
    max_advance_days integer NOT NULL DEFAULT 30,
    min_notice_days integer NOT NULL DEFAULT 1,
    time_zone text DEFAULT 'America/Chicago'::text,
    slot_duration integer DEFAULT 60,
    time_granularity text DEFAULT 'hour'::text,
    is_active boolean DEFAULT true,
    PRIMARY KEY (id),
    FOREIGN KEY (clinician_id) REFERENCES clinicians(id) ON DELETE CASCADE
);
Indexes

-- Primary key index (automatically created with PRIMARY KEY constraint)
CREATE UNIQUE INDEX availability_settings_pkey ON public.availability_settings USING btree (id);

-- Index on clinician_id for faster lookups
CREATE INDEX idx_availability_settings_clinician_id ON public.availability_settings USING btree (clinician_id);
Row Level Security (RLS)

-- Enable Row Level Security
ALTER TABLE public.availability_settings ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Clinician can delete own settings" 
  ON public.availability_settings 
  FOR DELETE 
  USING ((clinician_id)::text = (auth.uid())::text);

CREATE POLICY "Clinician can insert own settings" 
  ON public.availability_settings 
  FOR INSERT 
  WITH CHECK ((clinician_id)::text = (auth.uid())::text);

CREATE POLICY "Clinician can update own settings" 
  ON public.availability_settings 
  FOR UPDATE 
  USING ((clinician_id)::text = (auth.uid())::text);

CREATE POLICY "Clinician can view own settings" 
  ON public.availability_settings 
  FOR SELECT 
  USING ((clinician_id)::text = (auth.uid())::text);

CREATE POLICY "Clinicians can create their own availability settings" 
  ON public.availability_settings 
  FOR INSERT 
  WITH CHECK ((auth.uid())::text = (clinician_id)::text);

CREATE POLICY "Clinicians can insert their own availability settings" 
  ON public.availability_settings 
  FOR INSERT 
  WITH CHECK ((auth.uid())::text = (clinician_id)::text);

CREATE POLICY "Clinicians can update their own availability settings" 
  ON public.availability_settings 
  FOR UPDATE 
  USING ((auth.uid())::text = (clinician_id)::text);

CREATE POLICY "Clinicians can view their own availability settings" 
  ON public.availability_settings 
  FOR SELECT 
  USING ((auth.uid())::text = (clinician_id)::text);









  Table Description
The availability_settings table stores configuration parameters for clinician availability. Each row represents settings for a single clinician, controlling how their availability is managed in the calendar system.

Column Descriptions:
id (uuid): Unique identifier for each settings record, automatically generated
clinician_id (uuid): Foreign key reference to the clinicians table, identifies which clinician these settings belong to
created_at (timestamp with time zone): When the record was created, automatically set to current time
updated_at (timestamp with time zone): When the record was last updated, automatically set to current time
default_slot_duration (integer): Default duration in minutes for appointment slots, defaults to 60 minutes
max_advance_days (integer): Maximum number of days in advance that appointments can be booked, defaults to 30 days
min_notice_days (integer): Minimum number of days notice required for booking appointments, defaults to 1 day
time_zone (text): The clinician's preferred time zone, defaults to 'America/Chicago'
slot_duration (integer): Duration of availability slots in minutes, defaults to 60 minutes
time_granularity (text): Time interval granularity for the calendar, defaults to 'hour'
is_active (boolean): Flag indicating if these settings are currently active, defaults to true
Relationships:
Each availability_settings record belongs to exactly one clinician through the clinician_id foreign key
The foreign key has a CASCADE delete rule, meaning if a clinician is deleted, their availability settings are automatically deleted as well
Security:
Row Level Security (RLS) is enabled on this table
Multiple RLS policies ensure that clinicians can only view, insert, update, and delete their own availability settings
The policies use the Supabase auth.uid() function to compare with the clinician_id column
Notes for Implementation:
When working with this table, be sure to respect the time zone settings per clinician
The default_slot_duration and slot_duration may differ, with default_slot_duration being used for new appointments while slot_duration is used for availability blocks
The time_granularity field affects how time slots are displayed and selected in the calendar UI
There appear to be some duplicate policies (possibly due to schema evolution) that could be consolidated
This table is critical for the calendar system as it controls how and when clinicians can mark their availability and how clients can book appointments with them.
