// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { AuthError, AdminUserAttributes, UserResponse } from '@supabase/supabase-js';

const SUPABASE_URL = "https://gqlkritspnhjxfejvgfg.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdxbGtyaXRzcG5oanhmZWp2Z2ZnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3NjQ0NDUsImV4cCI6MjA1ODM0MDQ0NX0.BtnTfcjvHI55_fs_zor9ffQ9Aclg28RSfvgZrWpMuYs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

const supabaseClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Extend the auth type to include our custom admin methods
type ExtendedAuthClient = typeof supabaseClient.auth & {
  admin: typeof supabaseClient.auth.admin & {
    createUser: (userDetails: AdminUserAttributes) => Promise<UserResponse>;
    deleteUser: (userId: string) => Promise<UserResponse>;
  }
};

// Keep reference to the original admin object
const originalAdmin = supabaseClient.auth.admin;

// Create custom admin functions
const customAdminFunctions = {
  createUser: async (userDetails: AdminUserAttributes): Promise<UserResponse> => {
    const session = await supabaseClient.auth.getSession();
    if (!session.data.session) {
      const authError = new AuthError('Not authenticated');
      return { data: { user: null }, error: authError };
    }

    try {
      const response = await fetch(`${SUPABASE_URL}/functions/v1/admin-api/create-user`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${session.data.session.access_token}`
        },
        body: JSON.stringify(userDetails)
      });

      const result = await response.json();
      
      if (!response.ok) {
        const authError = new AuthError(result.error || 'Failed to create user');
        return { data: { user: null }, error: authError };
      }

      return { data: result, error: null };
    } catch (error) {
      const authError = new AuthError(error instanceof Error ? error.message : 'Unknown error');
      return { data: { user: null }, error: authError };
    }
  },
  
  deleteUser: async (userId: string): Promise<UserResponse> => {
    const session = await supabaseClient.auth.getSession();
    if (!session.data.session) {
      const authError = new AuthError('Not authenticated');
      return { data: { user: null }, error: authError };
    }

    try {
      const response = await fetch(`${SUPABASE_URL}/functions/v1/admin-api/delete-user`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${session.data.session.access_token}`
        },
        body: JSON.stringify({ userId })
      });

      const result = await response.json();
      
      if (!response.ok) {
        const authError = new AuthError(result.error || 'Failed to delete user');
        return { data: { user: null }, error: authError };
      }

      return { data: result, error: null };
    } catch (error) {
      const authError = new AuthError(error instanceof Error ? error.message : 'Unknown error');
      return { data: { user: null }, error: authError };
    }
  }
};

// Merge the original admin with our custom functions
(supabaseClient.auth as ExtendedAuthClient).admin = {
  ...originalAdmin,
  ...customAdminFunctions
};

export const supabase = supabaseClient;
