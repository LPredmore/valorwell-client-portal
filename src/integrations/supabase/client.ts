
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { format } from 'date-fns';

export const supabase = createClient<Database>(
  import.meta.env.VITE_SUPABASE_URL || '',
  import.meta.env.VITE_SUPABASE_ANON_KEY || ''
);

// Utility function to parse a date string into a Date object
export const parseDateString = (dateString: string | null) => {
  if (!dateString) return null;
  // Try to parse ISO format
  const date = new Date(dateString);
  if (!isNaN(date.getTime())) {
    return date;
  }
  
  // Try parsing common formats
  const parts = dateString.split(/[-/]/);
  if (parts.length === 3) {
    // Assume yyyy-mm-dd or mm/dd/yyyy
    const yearIndex = parts[0].length === 4 ? 0 : 2;
    const monthIndex = yearIndex === 0 ? 1 : 0;
    const dayIndex = yearIndex === 0 ? 2 : 1;
    
    const year = parseInt(parts[yearIndex]);
    const month = parseInt(parts[monthIndex]) - 1; // JS months are 0-indexed
    const day = parseInt(parts[dayIndex]);
    
    const parsedDate = new Date(year, month, day);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  
  // Return null if couldn't parse
  return null;
};

// Utility function to format a Date object to a string for the database
export const formatDateForDB = (date: Date) => {
  if (!date) return null;
  try {
    return format(date, 'yyyy-MM-dd');
  } catch (e) {
    console.error('Error formatting date:', e);
    return null;
  }
};

// Helper to get availability settings for a clinician
export const getClinicianAvailabilitySettings = async (clinicianId: string | null) => {
  if (!clinicianId) return null;
  
  const { data, error } = await supabase
    .from('availability_settings')
    .select('*')
    .eq('clinician_id', clinicianId)
    .single();
  
  if (error) {
    console.error('Error fetching availability settings:', error);
    return null;
  }
  
  return data;
};
