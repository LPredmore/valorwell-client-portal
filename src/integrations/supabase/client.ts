
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { AuthError, AdminUserAttributes, UserResponse } from '@supabase/supabase-js';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://gqlkritspnhjxfejvgfg.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdxbGtyaXRzcG5oanhmZWp2Z2ZnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3NjQ0NDUsImV4cCI6MjA1ODM0MDQ0NX0.BtnTfcjvHI55_fs_zor9ffQ9Aclg28RSfvgZrWpMuYs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

const supabaseClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Create custom admin functions
const createUser = async (userDetails: AdminUserAttributes): Promise<UserResponse> => {
  const session = await supabaseClient.auth.getSession();
  if (!session.data.session) {
    const authError = new AuthError('Not authenticated');
    return { data: { user: null }, error: authError };
  }

  try {
    const response = await fetch(`${SUPABASE_URL}/functions/v1/admin-api/create-user`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session.data.session.access_token}`
      },
      body: JSON.stringify(userDetails)
    });

    if (!response.ok) {
      const responseText = await response.text();
      let errorMessage = "Failed to create user";
      
      try {
        // Try to parse as JSON, but don't fail if it's not valid JSON
        const errorData = JSON.parse(responseText);
        errorMessage = errorData.error || errorMessage;
      } catch (e) {
        // If parsing fails, use the raw text if available
        if (responseText) {
          errorMessage = `Server error: ${responseText}`;
        }
      }
      
      const authError = new AuthError(errorMessage);
      return { data: { user: null }, error: authError };
    }

    const result = await response.json();
    
    return { data: result, error: null };
  } catch (error) {
    const authError = new AuthError(error instanceof Error ? error.message : 'Unknown error');
    return { data: { user: null }, error: authError };
  }
};

const deleteUser = async (userId: string): Promise<UserResponse> => {
  const session = await supabaseClient.auth.getSession();
  if (!session.data.session) {
    const authError = new AuthError('Not authenticated');
    return { data: { user: null }, error: authError };
  }

  try {
    const response = await fetch(`${SUPABASE_URL}/functions/v1/admin-api/delete-user`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session.data.session.access_token}`
      },
      body: JSON.stringify({ userId })
    });

    if (!response.ok) {
      const responseText = await response.text();
      let errorMessage = "Failed to delete user";
      
      try {
        // Try to parse as JSON, but don't fail if it's not valid JSON
        const errorData = JSON.parse(responseText);
        errorMessage = errorData.error || errorMessage;
      } catch (e) {
        // If parsing fails, use the raw text if available
        if (responseText) {
          errorMessage = `Server error: ${responseText}`;
        }
      }
      
      const authError = new AuthError(errorMessage);
      return { data: { user: null }, error: authError };
    }

    const result = await response.json();
    
    return { data: result, error: null };
  } catch (error) {
    const authError = new AuthError(error instanceof Error ? error.message : 'Unknown error');
    return { data: { user: null }, error: authError };
  }
};

// Add our custom methods to the admin object
supabaseClient.auth.admin = {
  ...supabaseClient.auth.admin,
  createUser,
  deleteUser
};

export const supabase = supabaseClient;
