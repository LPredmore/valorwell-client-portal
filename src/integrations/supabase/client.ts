
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://gqlkritspnhjxfejvgfg.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdxbGtyaXRzcG5oanhmZWp2Z2ZnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3NjQ0NDUsImV4cCI6MjA1ODM0MDQ0NX0.BtnTfcjvHI55_fs_zor9ffQ9Aclg28RSfvgZrWpMuYs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Define the DocumentAssignment type to match what's expected in DocumentFormRenderer.tsx
export interface DocumentAssignment {
  id: string;
  document_name: string;
  client_id: string;
  status: 'not_started' | 'pending' | 'in_progress' | 'completed';
  assigned_by?: string;
  created_at: string;
  updated_at: string;
  document_id?: string | null;
  completed_date?: string | null;
}

/**
 * Updates the status of a document assignment
 * @param assignmentId - The ID of the document assignment to update
 * @param status - The new status for the document assignment
 * @returns Object with success status and data or error
 */
export async function updateDocumentStatus(
  assignmentId: string,
  status: 'not_started' | 'in_progress' | 'completed'
) {
  try {
    const { data, error } = await supabase
      .from('document_assignments')
      .update({ 
        status,
        ...(status === 'completed' ? { completed_date: new Date().toISOString() } : {})
      })
      .eq('id', assignmentId)
      .select()
      .single();

    if (error) {
      console.error('Error updating document status:', error);
      return { success: false, error };
    }

    return { success: true, data };
  } catch (error) {
    console.error('Exception updating document status:', error);
    return { success: false, error };
  }
}

/**
 * Fetches document assignments for a client
 * @param clientId - The ID of the client
 * @returns Array of document assignments
 */
export async function fetchDocumentAssignments(clientId: string): Promise<DocumentAssignment[]> {
  try {
    const { data, error } = await supabase
      .from('document_assignments')
      .select('*')
      .eq('client_id', clientId)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Error fetching document assignments:', error);
      return [];
    }

    return data || [];
  } catch (error) {
    console.error('Exception fetching document assignments:', error);
    return [];
  }
}

/**
 * Gets the current user from the session
 * @returns The current user or null if not authenticated
 */
export async function getCurrentUser() {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    return user;
  } catch (error) {
    console.error('Error getting current user:', error);
    return null;
  }
}
