
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://gqlkritspnhjxfejvgfg.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdxbGtyaXRzcG5oanhmZWp2Z2ZnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3NjQ0NDUsImV4cCI6MjA1ODM0MDQ0NX0.BtnTfcjvHI55_fs_zor9ffQ9Aclg28RSfvgZrWpMuYs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

const supabaseClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

export const supabase = supabaseClient;

// Helper function to create a new user with a default password
export const createUser = async (
  email: string,
  userData: any,
  password = "temppass1234"
) => {
  return supabase.auth.signUp({
    email,
    password,
    options: {
      data: userData,
      emailRedirectTo: window.location.origin,
    }
  });
};

// Helper function to get clinician ID by professional name
export const getClinicianIdByName = async (professionalName: string) => {
  if (!professionalName) return null;
  
  const { data, error } = await supabase
    .from('clinicians')
    .select('id')
    .eq('clinician_professional_name', professionalName)
    .single();
    
  if (error || !data) {
    console.error('Error fetching clinician ID:', error);
    return null;
  }
  
  return data.id;
};

// Helper function to parse ISO date strings to local Date objects
export const parseDateString = (dateString: string | null): Date | null => {
  if (!dateString) return null;
  
  // Create date with explicit year, month, day to avoid timezone issues
  const [year, month, day] = dateString.split('-').map(Number);
  if (!year || !month || !day) return null;
  
  // Create a date using local timezone (months are 0-indexed in JS Date)
  return new Date(year, month - 1, day);
};

// Format date for database storage (YYYY-MM-DD)
export const formatDateForDB = (date: Date | null): string | null => {
  if (!date) return null;
  
  const year = date.getFullYear();
  // Add 1 to month because getMonth() is 0-indexed
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  
  return `${year}-${month}-${day}`;
};

// Helper functions for CPT codes
export interface CPTCode {
  code: string;
  name: string;
  fee: number;
  created_at?: string;
  updated_at?: string;
}

// Fetch all CPT codes
export const fetchCPTCodes = async (): Promise<CPTCode[]> => {
  const { data, error } = await supabase
    .from('cpt_codes')
    .select('*')
    .order('code');
    
  if (error) {
    console.error('Error fetching CPT codes:', error);
    return [];
  }
  
  return data || [];
};

// Add a new CPT code
export const addCPTCode = async (cptCode: CPTCode): Promise<{ success: boolean; error?: any }> => {
  const { error } = await supabase
    .from('cpt_codes')
    .insert(cptCode);
    
  if (error) {
    console.error('Error adding CPT code:', error);
    return { success: false, error };
  }
  
  return { success: true };
};

// Update an existing CPT code
export const updateCPTCode = async (code: string, updates: Partial<CPTCode>): Promise<{ success: boolean; error?: any }> => {
  const { error } = await supabase
    .from('cpt_codes')
    .update(updates)
    .eq('code', code);
    
  if (error) {
    console.error('Error updating CPT code:', error);
    return { success: false, error };
  }
  
  return { success: true };
};

// Delete a CPT code
export const deleteCPTCode = async (code: string): Promise<{ success: boolean; error?: any }> => {
  const { error } = await supabase
    .from('cpt_codes')
    .delete()
    .eq('code', code);
    
  if (error) {
    console.error('Error deleting CPT code:', error);
    return { success: false, error };
  }
  
  return { success: true };
};
